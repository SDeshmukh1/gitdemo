i`Notes
- collabedit.com/84mg5

Automating Start and Stop the EC2 Instance
Cloudwatch
- To trigger lambda function

Lambda Function
- To Stop the EC2 Instance

AWS
- Create EC2 Instance

https://aws.amazon.com/premiumsupport/knowledge-center/start-stop-lambda-cloudwatch

Python 2.7 script to stop EC2 instance
import boto3
# Enter the region your instances are in. Include only the region without specifying Availability Zone; e.g., 'us-east-1'
region = 'us-east-2'
# Enter your instances here: ex. ['X-XXXXXXXX', 'X-XXXXXXXX']
instances = ['i-03c23b6410fcd2e11']

def lambda_handler(event, context):
    ec2 = boto3.client('ec2', region_name=region)
    ec2.stop_instances(InstanceIds=instances)
    print 'stopped your instances: ' + str(instances)
	
linux

netstat -tulpn
- Open port details and programs

cat /etc/passwd
- All the Users available

Who
- login user name

ps -ef 
- All the running process on machine

ps -ef | grep '2670'
- gives the process details to the perticular port

Set the password for root
vi etc/ssh/sshd_config - to open the file in vi editor

esc + Shift + :
- TO wrote the command 

set number
- To give the number to every line


esc + /Password
- To search password in 
Remove the comment for passwordAuthentication Yes
Add the comment for PasswordAuthentication No

i
- to start insert mode

esc + /Permit
Remove the comment(#) for RemoveRootLogin Yes

To save vi editor changes and exit
:wq!

To quit without saving
:q!

Restart the SSH daemon
service sshd restart

uname -a 
- to check OS related details

Change Password
- passwd

To download httpd
yum install httpd -d

to intstall rpm
rpm -u rpmname

to check if httpd is installed or not
rpm -qa | grep httpd

Git

create local reposiraory
git init
Git add 
git commit

Topic for Today
	1. YML Document
	2. Ansible modules
	3. Install Ansible
	4. Ansible Architecture

We will create to 2 redhat ec2 instance 
1 Ansible Controller instance 
----------------------------------------------------Ansible-----------------------------
Ansible Installation
	1. Create a new file called 'ansible.repo' in cd /etc/yum.repos.d
	vi ansible.repo

	2. Copy the following content into it:
	[Ansible]
	name = ansible
	baseurl = https://releases.ansible.com/ansible/rpm/release/epel-7-x86_64/
	enabled = 1
	gpgcheck = 0 

	3. Run 'yum update' 
	rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
	yum -y install ansible
	ansible --version

------------------------------------------------------------------------------------------------------------
	2. Edit host file 

Cd /etc/ansible
Vi hosts

[all]
172.31.10.184 ansible_ssh_private_key_file=/root/.ssh/server1.pem ansible_ssh_user=ec2-user
(Private IP of HUB)    		(Private Key)				Login using user                                   

---------------------------------------------------------------------------------------------------------------------------------
	3. Create server1.pem file in /root/.ssh/server1.pem
	chmod 600 server.pem
----------------------------------------------------------------------------------------------------------------------------------
	4. Debug if it is working or not
	ssh -i server1.pem ec2-user@172.31.10.184
----------------------------------------------------------------------------------------------------------------------------------
	5. Run the ansible command
	ansible all -m raw -a 'sudo uptime'
------------------------------------------------------------------------------------------------------------------------------------

Added on 2/3/2019

Ansible modules

To install software
- hosts: ec2-user
  user: ubuntu
  sudo: true
  
  tasks:
    - name: Install Web Server
      yum: pkg=httpd state=installed
	  
To install and Run Service
---
- hosts: all
  user: ec2-user
  sudo: true
  
  vars:
    pack_name: httpd
    serv_name: httpd
  
  tasks:
    - name: Install {{ pack_name }}
      yum: pkg={{ pack_name }} state=installed
    - name: Start {{ serv_name }}
      service: name={{ serv_name }} state=started
	  
To Run Service
---
- hosts: all
  user: ec2-user
  sudo: true

  tasks:
    - name: Start httpd service
      service: name=httpd  state=started
-----------------------------
Week 4
Command Used today

  108  cd /opt/gitdemo/ansible-demo/
  109  vi look-up.yml
  110  ansible-playbook look-up.yml -v
  111  vi look-up.yml
  112  ansible-playbook look-up.yml -v
  113  vi look-up.yml
  114  ansible-playbook look-up.yml -v
  115  vi look-up.yml
  116  ansible-playbook look-up.yml -v
  117  ansible-playbook look-up.yml -vv
  118  vi city-data.csv
  119  ansible-playbook look-up.yml -vv
  120  vi look-up.yml
  121  ansible-playbook look-up.yml -vv
  122  vi look-up.yml
  123  ansible-playbook look-up.yml -vv
  124  cat city-data.csv
  125  cat lookup_plugin_out.out
  126  ll
  127  cd ..
  128  ll
  129  cd ..
  130  ll
  131  cd ..
  132  ll
  133  cd /opt
  134  ll
  135  cd gitdemo/
  136  ll
  137  cd ansible-demo/
  138  ll
  139  cat look-up.yml
  140  cat  /opt/gitdemo/ansible-demo/lookup_plugin_out.out
  141  ll
  142  ansible-playbook look-up.yml -vv
  143  vi look-up.yml
  144  cat  /opt/gitdemo/ansible-demo/lookup_plugin_out.out
  145  cat /opt/gitdemo/ansible-demo/lookup_plugin_out.out
  146  vi look-up.yml
  147  cat city-data.csv
  148  vi look-up.yml
  149  ansible-playbook look-up.yml -vv
  150  vi look-up.yml
  151  ansible-playbook look-up.yml -vv
  152  ll
  153*
  154  pwd
  155  vi look-up.yml
  156  ansible-playbook look-up.yml -vvv
  157  vi city-data.csv
  158  ansible-playbook look-up.yml -vvv
  159  ll -ls
  160  vi look-up.yml
  161  ansible-playbook look-up.yml -vvv
  162  ll
  163  cat shubham.out
  164  vi look-up.yml
  165  ssh -i /root/.ssh/server1.pem ec2-user@172.31.10.184
  166  vi index.html.j2
  167  vi ninja_template.yml
  168  ansible-playbook ninja_template.yml -vv
  169  cd /etc/yum.repos.d
  170  vi ansible.repo
  171  ansible-playbook ninja_template.yml -vv
  172  cd /opt/gitdemo/ansible-demo/
  173  vi ninja_template.yml
  174  vi ninja_template.yml -vvv
  175  ansible-playbook ninja_template.yml -vvv
  176  ssh-keygen -t rsa
  177  cd /root/.ssh/
  178  ll
  179  cd /opt/gitdemo/ansible-demo/
  180  vi sshkey.yml
  181  ansible-playbook sshkey.yml -vvv
  182  ssh shubham@ec2-18-188-207-173.us-east-2.compute.amazonaws.com
  183  history


Modules used today

---
- hosts: web  #group name from the inventory
  user: ec2-user Server Auth
  sudo: true

  vars:
    pack_name: httpd
    
  tasks:
    - name: Install {{ pack_name }}
      yum: pkg={{ pack_name }} state=latest
    - name: Verify Service Status
      shell: systemctl status httpd
      register: result
      until: result.stdout.find("active (running)") !=-1
      retries: 5
      delay: 5
------------------

---- Jinja2 Templating------------------

- hosts: all

  vars: 
   - MyMessage: "Welcome to Ansible world!"
   - DBMessage: "Hello from MongoDB"

  tasks:
   - name: NGINX | Installing NGINX repo rpm
     yum: name=http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm
   - name: NGINX | Installing NGINX
     yum: name=nginx state=latest
   - name: index.html copy
     template: src=index.html.j2 dest=/usr/share/nginx/html/index.html
   - name: NGINX | Starting NGINX
     service: name=nginx state=started

-----------index.html.j2--------------
<html>
<body>

<h1>Ansible Demo</h1>
<p>{{MyMessage}}</p>
<p>{{DBMessage}}</p>
<p>{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}</p>
</body>
</html>

------------------------------------------------

Creating one automation user for all the machine

Ssh-keygen -t rsa


- hosts: all

  sudo: yes

  tasks:

  - user: name=myuser comment="My User" group=wheel

  - name: Placing key
    authorized_key: user=myuser key="{{ lookup('file', '/root/ansible/files/authorized_keys.myuser.pub') }}"
---------------------------------------------------------




